# Даны значения величины заработной платы заемщиков банка (zp) и значения их поведенческого кредитного скоринга (ks):

# Найдите ковариацию этих двух величин с помощью элементарных действий, а затем с помощью функции cov из numpy
# Полученные значения должны быть равны.
# Найдите коэффициент корреляции Пирсона с помощью ковариации и среднеквадратичных отклонений двух признаков,
# а затем с использованием функций из библиотек numpy и pandas.

import scipy.stats as stats
import numpy as np
import matplotlib.pyplot as plt

x = np.array([35, 45, 190, 200, 40, 70, 54, 150, 120, 110])
y = np.array([401, 574, 874, 919, 459, 739, 653, 902, 746, 832])

# Ковариация вручную
cov = np.mean(x*y) - np.mean(x) * np.mean(y)
print(cov)
# 9157.839999999997

# Ковариация функцией
print(np.cov(x,y))
# [[ 3882.93333333 10175.37777778]
#  [10175.37777778 33854.32222222]]

# Коэф корел Пирсона
print(np.corrcoef(x,y))
# [[1.         0.88749009]
#  [0.88749009 1.        ]]


# Несмещенная ковариация
print(np.cov(x,y,ddof=1))
# [[ 3882.93333333 10175.37777778]
#  [10175.37777778 33854.32222222]]
print(np.std(x,ddof=1))
# 62.31318747531162
print(np.std(y,ddof=1))
# 183.99544076477068
print(10175.37777778 /(62.31318747531162 * 183.99544076477068))
# 0.88749009207411


# Смещенная ковариация
print(np.cov(x,y,ddof=0))
# [[ 3494.64  9157.84]
#  [ 9157.84 30468.89]]
print(np.std(x,ddof=0))
# 59.115480206118605
print(np.std(y,ddof=0))
# 174.55340157098058
print(9157.84 /(59.115480206118605 * 174.55340157098058))
# 0.8874900920739162